from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    LabeledPrice
)
from telegram.ext import (
    ApplicationBuilder, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler,
    ConversationHandler, CommandHandler,
    PreCheckoutQueryHandler
)
from deep_translator import GoogleTranslator
import uuid
import json
import os
from datetime import datetime

TOKEN = "8175823615:AAEsX3F7JQUpN_A-6bsk-mzX4CKdb4253JM"
PROVIDER_TOKEN = "YOUR_PROVIDER_TOKEN"

ASK_TITLE, ASK_DESCRIPTION, ASK_PRICE, ASK_IMAGES, ASK_FILE, ASK_TAGS = range(6)
ASK_FREE_TITLE, ASK_FREE_DESCRIPTION, ASK_FREE_IMAGES, ASK_FREE_FILE, ASK_FREE_LINKS, ASK_FREE_TAGS = range(6, 12)

CHANNEL_ID = "@BlenderForge"
REVIEWS_CHANNEL_ID = -1002740649693
REVIEWS_CHANNEL_URL = "https://t.me/BlenderForgeReviews"
BOT_USERNAME = "my_cool_shop_bot"
YOUR_ADMIN_ID = 123456789  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à Telegram ID
YOUR_ADMIN_USERNAME = "Samurai22_1"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à username

PRODUCTS_FILE = "products.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
PRODUCTS = {}
FREE_MESSAGES = {}

def save_products():
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ç–æ–≤–∞—Ä–∏ —É —Ñ–∞–π–ª"""
    try:
        with open(PRODUCTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(PRODUCTS, f, ensure_ascii=False, indent=2)
        print(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(PRODUCTS)} —Ç–æ–≤–∞—Ä—ñ–≤")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")

def load_products():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–æ–≤–∞—Ä–∏ –∑ —Ñ–∞–π–ª—É"""
    global PRODUCTS
    try:
        if os.path.exists(PRODUCTS_FILE):
            with open(PRODUCTS_FILE, 'r', encoding='utf-8') as f:
                PRODUCTS = json.load(f)
                print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(PRODUCTS)} —Ç–æ–≤–∞—Ä—ñ–≤")
        else:
            print("–§–∞–π–ª —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–æ–≤–∏–π")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        PRODUCTS = {}

def add_translation(text: str) -> str:
    try:
        translated = GoogleTranslator(source='auto', target='en').translate(text)
        return f"{text}\n\n_{translated}_"
    except Exception:
        return text

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

def parse_links(text):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–∏–ª–∞–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ '–¢–µ–∫—Å—Ç - URL'"""
    if not text:
        return []
    
    links = []
    lines = text.strip().split('\n')
    
    for line in lines:
        if ' - ' in line:
            parts = line.split(' - ', 1)
            if len(parts) == 2:
                title = parts[0].strip()
                url = parts[1].strip()
                if title and url:
                    links.append((title, url))
    
    return links

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ä–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
async def handle_old_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∏ –Ω–∞ —Å—Ç–∞—Ä—ñ —Ç–æ–≤–∞—Ä–∏, —è–∫–∏—Ö –Ω–µ–º–∞—î –≤ –ø–∞–º'—è—Ç—ñ"""
    await update.message.reply_text(
        add_translation(
            "‚ùó –¶–µ–π —Ç–æ–≤–∞—Ä –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.\n"
            "–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –≤ –∫–∞–Ω–∞–ª—ñ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        ),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É", url="https://t.me/BlenderForge")],
            [InlineKeyboardButton("‚úâÔ∏è –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º", url=f"https://t.me/{YOUR_ADMIN_USERNAME}")]
        ])
    )

# ----------------- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ -----------------
async def reply_hello(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí∏ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / Create Paid Message", callback_data="create_paid")],
        [InlineKeyboardButton("üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / Create Free Message", callback_data="create_free")]
    ]
    await update.message.reply_text(
        add_translation("–ü—Ä–∏–≤—ñ—Ç! –©–æ —Ö–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏?"),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ----------------- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ -----------------
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(add_translation("üìå –ö—Ä–æ–∫ 1: –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É"))
    return ASK_TITLE

async def ask_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text
    await update.message.reply_text(add_translation("‚úèÔ∏è –ö—Ä–æ–∫ 2: –û–ø–∏—à–∏ —Ç–æ–≤–∞—Ä"))
    return ASK_DESCRIPTION

async def ask_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text(add_translation("üí∞ –ö—Ä–æ–∫ 3: –í–∫–∞–∂–∏ —Ü—ñ–Ω—É —É –∑—ñ—Ä–∫–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 50)"))
    return ASK_PRICE

async def ask_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = int(update.message.text)
        context.user_data["price"] = price
        context.user_data["images"] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ
        await update.message.reply_text(add_translation("üñº –ö—Ä–æ–∫ 4: –ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—à ‚Äî –Ω–∞–ø–∏—à–∏ /skip"))
        return ASK_IMAGES
    except ValueError:
        await update.message.reply_text(add_translation("‚ùó –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."))
        return ASK_PRICE

async def ask_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1] if update.message.photo else None
    if photo:
        context.user_data["images"].append(photo.file_id)
        await update.message.reply_text(add_translation("‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª–∏ —â–µ –∞–±–æ /skip"))
    return ASK_IMAGES

async def skip_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(add_translation("üì¶ –ö—Ä–æ–∫ 5: –ù–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª, —è–∫–∏–π –æ—Ç—Ä–∏–º–∞—î –ø–æ–∫—É–ø–µ—Ü—å"))
    return ASK_FILE

async def ask_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document:
        await update.message.reply_text(add_translation("‚ùó –ù–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª, –∞ –Ω–µ —Ç–µ–∫—Å—Ç."))
        return ASK_FILE
    context.user_data["file_id"] = document.file_id
    await update.message.reply_text(add_translation("üè∑ –ö—Ä–æ–∫ 6: –í–≤–µ–¥–∏ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É (–∞–±–æ /skip)"))
    return ASK_TAGS

async def ask_tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tags"] = update.message.text
    await send_preview(update, context)
    return ConversationHandler.END

async def skip_tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tags"] = ""
    await send_preview(update, context)
    return ConversationHandler.END

# ----------------- –°–æ–∑–¥–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è -----------------
async def button_free_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    context.user_data["images"] = []
    await update.callback_query.message.reply_text(add_translation("üìå –ö—Ä–æ–∫ 1: –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"))
    return ASK_FREE_TITLE

async def ask_free_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text
    await update.message.reply_text(add_translation("‚úèÔ∏è –ö—Ä–æ–∫ 2: –û–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"))
    return ASK_FREE_DESCRIPTION

async def ask_free_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text(add_translation("üñº –ö—Ä–æ–∫ 3: –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—à ‚Äî –Ω–∞–ø–∏—à–∏ /skip"))
    return ASK_FREE_IMAGES

async def ask_free_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1] if update.message.photo else None
    if photo:
        context.user_data["images"].append(photo.file_id)
        await update.message.reply_text(add_translation("‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª–∏ —â–µ –∞–±–æ /skip"))
    return ASK_FREE_IMAGES

async def skip_free_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(add_translation("üì¶ –ö—Ä–æ–∫ 4: –ù–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –∞–±–æ /skip"))
    return ASK_FREE_FILE

async def ask_free_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if document:
        context.user_data["file_id"] = document.file_id
    else:
        context.user_data["file_id"] = None
    await update.message.reply_text(add_translation("üîó –ö—Ä–æ–∫ 5: –î–æ–¥–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–ù–∞–∑–≤–∞ –∫–Ω–æ–ø–∫–∏ - https://example.com\n–Ü–Ω—à–∞ –∫–Ω–æ–ø–∫–∞ - https://site.com\n\n–ê–±–æ –Ω–∞–ø–∏—à–∏ /skip"))
    return ASK_FREE_LINKS

async def skip_free_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["file_id"] = None
    await update.message.reply_text(add_translation("üîó –ö—Ä–æ–∫ 5: –î–æ–¥–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–ù–∞–∑–≤–∞ –∫–Ω–æ–ø–∫–∏ - https://example.com\n–Ü–Ω—à–∞ –∫–Ω–æ–ø–∫–∞ - https://site.com\n\n–ê–±–æ –Ω–∞–ø–∏—à–∏ /skip"))
    return ASK_FREE_LINKS

async def ask_free_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["links"] = update.message.text
    await update.message.reply_text(add_translation("üè∑ –ö—Ä–æ–∫ 6: –í–≤–µ–¥–∏ —Ö–µ—à—Ç–µ–≥–∏ –∞–±–æ /skip"))
    return ASK_FREE_TAGS

async def skip_free_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["links"] = ""
    await update.message.reply_text(add_translation("üè∑ –ö—Ä–æ–∫ 6: –í–≤–µ–¥–∏ —Ö–µ—à—Ç–µ–≥–∏ –∞–±–æ /skip"))
    return ASK_FREE_TAGS

async def ask_free_tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tags"] = update.message.text
    await send_free_preview(update, context)
    return ConversationHandler.END

async def skip_free_tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tags"] = ""
    await send_free_preview(update, context)
    return ConversationHandler.END

# ----------------- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è -----------------
async def send_free_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    title = context.user_data["title"]
    description = context.user_data["description"]
    tags = context.user_data.get("tags", "")
    images = context.user_data.get("images", [])
    file_id = context.user_data.get("file_id")
    links_text = context.user_data.get("links", "")

    message_key = f"free_{uuid.uuid4().hex[:8]}"
    FREE_MESSAGES[message_key] = {
        "title": title,
        "description": description,
        "tags": tags,
        "images": images,
        "file_id": file_id,
        "links": links_text
    }

    context.user_data["current_free_key"] = message_key

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
    escaped_title = escape_markdown(title)
    escaped_desc = escape_markdown(description)
    escaped_tags = escape_markdown(tags) if tags else ""

    message_text = f"‚≠ê *{escaped_title}*\n{escaped_desc}"
    if escaped_tags:
        message_text += f"\n\n{escaped_tags}"

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
    try:
        translated_title = GoogleTranslator(source='auto', target='en').translate(title)
        translated_desc = GoogleTranslator(source='auto', target='en').translate(description)
        message_text += f"\n\n_{escape_markdown(translated_title)}_\n_{escape_markdown(translated_desc)}_"
    except:
        pass

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø–æ—Å–∏–ª–∞–Ω—å
    custom_keyboard = []
    links = parse_links(links_text)
    
    for link_title, link_url in links:
        custom_keyboard.append([InlineKeyboardButton(link_title, url=link_url)])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç–∞
    if images:
        if custom_keyboard:
            await update.effective_chat.send_photo(
                photo=images[0], 
                caption=message_text, 
                parse_mode="MarkdownV2",
                reply_markup=InlineKeyboardMarkup(custom_keyboard)
            )
        else:
            await update.effective_chat.send_photo(
                photo=images[0], 
                caption=message_text, 
                parse_mode="MarkdownV2"
            )
        for img in images[1:]:
            await update.effective_chat.send_photo(photo=img)
    else:
        if custom_keyboard:
            await update.effective_chat.send_message(
                text=message_text, 
                parse_mode="MarkdownV2",
                reply_markup=InlineKeyboardMarkup(custom_keyboard)
            )
        else:
            await update.effective_chat.send_message(
                text=message_text, 
                parse_mode="MarkdownV2"
            )

    if file_id:
        await update.effective_chat.send_document(document=file_id)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    confirm_keyboard = [[
        InlineKeyboardButton("‚úÖ –¢–∞–∫ / Yes", callback_data=f"post_free:{message_key}"),
        InlineKeyboardButton("‚ùå –ù—ñ / No", callback_data="cancel_free_post")
    ]]
    await update.effective_chat.send_message(
        add_translation("üì¢ –•–æ—á–µ—à –∑–∞–ø–æ—Å—Ç–∏—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∫–∞–Ω–∞–ª?"),
        reply_markup=InlineKeyboardMarkup(confirm_keyboard)
    )

# ----------------- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª -----------------
async def confirm_free_post_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ callback_data
    data = query.data  # "post_free:free_XXXXXX"
    free_key = data.split(":")[1] if ":" in data else None

    if not free_key or free_key not in FREE_MESSAGES:
        await query.message.reply_text(add_translation("‚ùó –ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó."))
        return

    msg_data = FREE_MESSAGES[free_key]

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    escaped_title = escape_markdown(msg_data['title'])
    escaped_desc = escape_markdown(msg_data['description'])
    escaped_tags = escape_markdown(msg_data['tags']) if msg_data['tags'] else ""

    channel_text = f"‚≠ê *{escaped_title}*\n{escaped_desc}"
    if escaped_tags:
        channel_text += f"\n\n{escaped_tags}"

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
    try:
        translated_title = GoogleTranslator(source='auto', target='en').translate(msg_data['title'])
        translated_desc = GoogleTranslator(source='auto', target='en').translate(msg_data['description'])
        channel_text += f"\n\n_{escape_markdown(translated_title)}_\n_{escape_markdown(translated_desc)}_"
    except:
        pass

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø–æ—Å–∏–ª–∞–Ω—å
    custom_keyboard = []
    links = parse_links(msg_data.get('links', ''))
    
    for link_title, link_url in links:
        custom_keyboard.append([InlineKeyboardButton(link_title, url=link_url)])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
    try:
        if msg_data["images"]:
            if custom_keyboard:
                await context.bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=msg_data["images"][0],
                    caption=channel_text,
                    parse_mode="MarkdownV2",
                    reply_markup=InlineKeyboardMarkup(custom_keyboard)
                )
            else:
                await context.bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=msg_data["images"][0],
                    caption=channel_text,
                    parse_mode="MarkdownV2"
                )
            for img in msg_data["images"][1:]:
                await context.bot.send_photo(chat_id=CHANNEL_ID, photo=img)
        else:
            if custom_keyboard:
                await context.bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=channel_text,
                    parse_mode="MarkdownV2",
                    reply_markup=InlineKeyboardMarkup(custom_keyboard)
                )
            else:
                await context.bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=channel_text,
                    parse_mode="MarkdownV2"
                )

        if msg_data["file_id"]:
            await context.bot.send_document(chat_id=CHANNEL_ID, document=msg_data["file_id"])

        await query.message.edit_text(add_translation("‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —É –∫–∞–Ω–∞–ª—ñ!"))

    except Exception as e:
        await query.message.edit_text(add_translation(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {str(e)}"))

    # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    if free_key in FREE_MESSAGES:
        del FREE_MESSAGES[free_key]

async def cancel_free_post_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    message_key = context.user_data.get("current_free_key")
    if message_key and message_key in FREE_MESSAGES:
        del FREE_MESSAGES[message_key]

    await query.message.edit_text(add_translation("‚ùå –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ."))

# ----------------- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ -----------------
async def send_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    title = context.user_data["title"]
    description = context.user_data["description"]
    price = context.user_data["price"]
    tags = context.user_data.get("tags", "")
    images = context.user_data.get("images", [])
    file_id = context.user_data["file_id"]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    product_key = f"product_{uuid.uuid4().hex[:8]}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ —Å –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
    PRODUCTS[product_key] = {
        "title": title,
        "description": description,
        "price": price,
        "file_id": file_id,
        "images": images,
        "tags": tags,
        "created_at": str(datetime.now())
    }
    
    # –í–ê–ñ–õ–ò–í–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ñ–∞–π–ª
    save_products()

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
    escaped_title = escape_markdown(title)
    escaped_desc = escape_markdown(description)
    escaped_tags = escape_markdown(tags) if tags else ""

    message_text = f"‚≠ê *{escaped_title}*\n{escaped_desc}\n\n*–¶—ñ–Ω–∞:* {price} ‚≠ê\nPrice: {price} ‚≠ê"
    if escaped_tags:
        message_text += f"\n\n{escaped_tags}"
    message_text += "\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
    try:
        translated_title = GoogleTranslator(source='auto', target='en').translate(title)
        translated_desc = GoogleTranslator(source='auto', target='en').translate(description)
        message_text = f"‚≠ê *{escaped_title}*\n{escaped_desc}\n\n*–¶—ñ–Ω–∞:* {price} ‚≠ê\nPrice: {price} ‚≠ê\n\n_{escape_markdown(translated_title)}_\n_{escape_markdown(translated_desc)}_"
        if escaped_tags:
            message_text += f"\n\n{escaped_tags}"
        message_text += "\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"
    except:
        pass

    keyboard = [
        [InlineKeyboardButton("üí≥ –ü—Ä–∏–¥–±–∞—Ç–∏ / Buy", url=f"https://t.me/{BOT_USERNAME}?start={product_key}")],
        [InlineKeyboardButton("‚ÑπÔ∏è –Ø–∫ –∫—É–ø–∏—Ç–∏? / How to buy?", callback_data="how_to_buy")],
        [InlineKeyboardButton("üìù –í—ñ–¥–≥—É–∫–∏ / Reviews", url=REVIEWS_CHANNEL_URL)]
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if images:
        msg = await update.effective_chat.send_photo(
            photo=images[0],
            caption=message_text,
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
        for img in images[1:]:
            await update.effective_chat.send_photo(photo=img)
    else:
        msg = await update.effective_chat.send_message(
            text=message_text,
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    context.user_data["preview_message_id"] = msg.message_id
    context.user_data["current_product_key"] = product_key
    context.user_data["preview_text"] = message_text
    context.user_data["preview_keyboard"] = keyboard

    confirm_keyboard = [[
        InlineKeyboardButton("‚úÖ –¢–∞–∫ / Yes", callback_data="post_to_channel"),
        InlineKeyboardButton("‚ùå –ù—ñ / No", callback_data="cancel_post")
    ]]
    await update.effective_chat.send_message(
        add_translation("üì¢ –•–æ—á–µ—à –∑–∞–ø–æ—Å—Ç–∏—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä —É –∫–∞–Ω–∞–ª?"),
        reply_markup=InlineKeyboardMarkup(confirm_keyboard)
    )

# ----------------- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª -----------------
async def confirm_post_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    product_key = context.user_data.get("current_product_key")
    if not product_key or product_key not in PRODUCTS:
        await query.message.reply_text(add_translation("‚ùó –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó."))
        return

    product = PRODUCTS[product_key]
    message_text = context.user_data["preview_text"]
    keyboard = context.user_data["preview_keyboard"]

    try:
        if product.get("images"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await context.bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=product["images"][0],
                caption=message_text,
                parse_mode="MarkdownV2",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for img in product["images"][1:]:
                await context.bot.send_photo(chat_id=CHANNEL_ID, photo=img)
        else:
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=message_text,
                parse_mode="MarkdownV2",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        await query.message.edit_text(add_translation("‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —É –∫–∞–Ω–∞–ª—ñ!"))
    except Exception as e:
        await query.message.edit_text(add_translation(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {str(e)}"))

# ----------------- –û—Ç–º–µ–Ω–∞ -----------------
async def cancel_post_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    product_key = context.user_data.get("current_product_key")
    if product_key and product_key in PRODUCTS:
        del PRODUCTS[product_key]
        save_products()  # –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–∞–π–ª
    
    preview_id = context.user_data.get("preview_message_id")
    if preview_id:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=preview_id)
        except:
            pass
    await query.message.edit_text(add_translation("‚ùå –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ."))

# ----------------- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è -----------------
async def how_to_buy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text=add_translation(
            "‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –∫—É–ø—ñ–≤–ª—ñ:\n"
            "1. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–¥–±–∞—Ç–∏¬ª\n"
            "2. –û–ø–ª–∞—Ç–∏ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ Telegram Payments\n"
            "3. –û—Ç—Ä–∏–º–∞–π —Ñ–∞–π–ª –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ ‚úÖ"
        )
    )

# ----------------- –û–ø–ª–∞—Ç–∞ –∏ –æ—Ç–∑—ã–≤—ã -----------------
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if args and len(args) > 0:
        product_key = args[0]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–æ–≤–∞—Ä
        if product_key in PRODUCTS:
            product = PRODUCTS[product_key]
            prices = [LabeledPrice(label=product["title"], amount=product["price"])]
            
            context.user_data["pending_payment_key"] = product_key

            await context.bot.send_invoice(
                chat_id=update.effective_chat.id,
                title=product["title"],
                description=product["description"],
                payload=product_key,
                provider_token=PROVIDER_TOKEN,
                currency="XTR",
                prices=prices,
                start_parameter=product_key
            )
        else:
            # –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ —Å—Ç–∞—Ä–∏–π –ø–æ—Å—Ç
            await handle_old_product(update, context)
    else:
        # –ó–≤–∏—á–∞–π–Ω–∏–π start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        await update.message.reply_text(
            add_translation("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ '–ø—Ä–∏–≤—ñ—Ç' —â–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º."),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É", url="https://t.me/BlenderForge")]
            ])
        )

async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payload = update.message.successful_payment.invoice_payload
    product = PRODUCTS.get(payload)
    
    if not product:
        await update.message.reply_text(add_translation("‚ùó –ù–µ–º–∞—î —Ñ–∞–π–ª—É –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è."))
        return

    await update.message.reply_text(add_translation("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞! –û—Å—å —Ç–≤—ñ–π —Ñ–∞–π–ª:"))
    await update.message.reply_document(document=product["file_id"])

    context.user_data["awaiting_review"] = True
    await update.message.reply_text(add_translation("‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–≥—É–∫ –ø—Ä–æ —Ç–æ–≤–∞—Ä:"))

async def ask_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_review"):
        return

    text = update.message.text
    user = update.message.from_user

    await context.bot.send_message(
        chat_id=REVIEWS_CHANNEL_ID,
        text=add_translation(f"üí¨ –í—ñ–¥–≥—É–∫ –≤—ñ–¥ @{user.username or user.id}:\n\n{text}")
    )

    await update.message.reply_text(add_translation("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ —Ç–≤—ñ–π –≤—ñ–¥–≥—É–∫!"))
    context.user_data["awaiting_review"] = False

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    if update.effective_user.id != YOUR_ADMIN_ID:
        return
    
    products_count = len(PRODUCTS)
    await update.message.reply_text(
        f"üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å:\n"
        f"üì¶ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {products_count}\n"
        f"üíæ –§–∞–π–ª: {PRODUCTS_FILE}\n\n"
        f"–ö–æ–º–∞–Ω–¥–∏:\n"
        f"/products - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏\n"
        f"/clear_old - –æ—á–∏—Å—Ç–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω—ñ–≤"
    )

# –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
async def products_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤"""
    if update.effective_user.id != YOUR_ADMIN_ID:
        return
    
    if not PRODUCTS:
        await update.message.reply_text("–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤")
        return
    
    products_list = []
    for key, product in PRODUCTS.items():
        created_at = product.get('created_at', '–ù–µ–≤—ñ–¥–æ–º–æ')
        products_list.append(
            f"üîπ {product['title']}\n"
            f"   ID: {key}\n"
            f"   –¶—ñ–Ω–∞: {product['price']} ‚≠ê\n"
            f"   –°—Ç–≤–æ—Ä–µ–Ω–æ: {created_at[:10] if created_at != '–ù–µ–≤—ñ–¥–æ–º–æ' else created_at}\n"
        )
    
    message = f"üì¶ –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ ({len(products_list)}):\n\n" + "\n".join(products_list)
    
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ
    if len(message) > 4000:
        for i in range(0, len(message), 4000):
            await update.message.reply_text(message[i:i+4000])
    else:
        await update.message.reply_text(message)

# ----------------- –ó–∞–ø—É—Å–∫ -----------------
# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
load_products()

app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–ø—Ä–∏–≤—ñ—Ç$"), reply_hello))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
app.add_handler(ConversationHandler(
    entry_points=[CallbackQueryHandler(button_free_handler, pattern="create_free")],
    states={
        ASK_FREE_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_free_title)],
        ASK_FREE_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_free_description)],
        ASK_FREE_IMAGES: [MessageHandler(filters.PHOTO, ask_free_images), CommandHandler("skip", skip_free_images)],
        ASK_FREE_FILE: [MessageHandler(filters.Document.ALL, ask_free_file), CommandHandler("skip", skip_free_file)],
        ASK_FREE_LINKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_free_links), CommandHandler("skip", skip_free_links)],
        ASK_FREE_TAGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_free_tags), CommandHandler("skip", skip_free_tags)],
    },
    fallbacks=[CommandHandler("cancel", cancel_post_handler)],
    allow_reentry=True,
    per_chat=True
))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
app.add_handler(ConversationHandler(
    entry_points=[CallbackQueryHandler(button_handler, pattern="create_paid")],
    states={
        ASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_title)],
        ASK_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_description)],
        ASK_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_price)],
        ASK_IMAGES: [MessageHandler(filters.PHOTO, ask_images), CommandHandler("skip", skip_images)],
        ASK_FILE: [MessageHandler(filters.Document.ALL, ask_file)],
        ASK_TAGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_tags), CommandHandler("skip", skip_tags)],
    },
    fallbacks=[CommandHandler("cancel", cancel_post_handler)],
    allow_reentry=True,
    per_chat=True
))

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
app.add_handler(CommandHandler("start", start_handler))

# –ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏
app.add_handler(CommandHandler("admin", admin_command))
app.add_handler(CommandHandler("products", products_command))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
app.add_handler(CallbackQueryHandler(confirm_free_post_handler, pattern=r"^post_free:"))
app.add_handler(CallbackQueryHandler(cancel_free_post_handler, pattern="cancel_free_post"))
app.add_handler(CallbackQueryHandler(confirm_post_handler, pattern="post_to_channel"))
app.add_handler(CallbackQueryHandler(cancel_post_handler, pattern="cancel_post"))
app.add_handler(CallbackQueryHandler(how_to_buy_handler, pattern="how_to_buy"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ask_review))

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
print(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {len(PRODUCTS)}")
app.run_polling()
